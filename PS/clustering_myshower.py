#import xml.etree.ElementTree as ET
import gzip
import numpy as np
import awkward as ak
import fastjet
import math


def comp_R(mom4):
    phi = math.atan2(mom4["px"],mom4["py"])
    mag = math.sqrt(mom4["px"]**2+mom4["py"]**2+mom4["pz"]**2)
    nu = 0.5*math.log((mag+mom4["pz"])/(mag-mom4["pz"]))
    return math.sqrt(nu**2+phi**2)

def MatchJetsPartons(pseudo_jet_mom,parton_mom,r_clust):
    return (comp_R(pseudo_jet_mom) <= comp_R(parton_mom)+r_clust and 
        comp_R(pseudo_jet_mom) >= comp_R(parton_mom)-(r_clust*1.5))

#Number of events to cluster
nEvents = 100000

#The clustering radius
R_clust = 0.4
#input_file is the file generated by our shower
input_file = "shower.txt"
#The hempc of the previously showered event from pythia
event_file = "/home/guiwi/MG5_aMC_v3_5_1/eejjj/Events/run_06/tag_1_pythia8_events.hepmc"

file = open(input_file,'r')
lines = file.readlines()
file.close()

#Fast jet require the use of an Awkward array
builder = ak.ArrayBuilder()
builder.begin_list()
hard_build = ak.ArrayBuilder()
hard_build.begin_list()


#We start the count at -1 as we eve_num += 1 for every event even the first
eve_num = -1

#We have to be carefull because with this implemetnation, the first record in our Awkward builder is empty
for line in lines:
    if line[:7] == "<Event>":
        eve_num += 1
        builder.end_list()
        hard_build.end_list()
        builder.begin_list()
        hard_build.begin_list()
    elif line[:5] =="<pid>" and line[5:8] != "-11" and line[5:7] != "11":
        start = line.find("<mom>")+6
        end = line.find("<\\mom>")-2
        if int(line[end+8:end+9]) == 1:# or int(line[end+8:end+9]) == 0:
            builder.append({"px":line[start:end].split(",")[0],"py":line[start:end].split(",")[1],
                "pz":line[start:end].split(",")[2],"E":line[start:end].split(",")[3]})
    elif line[:6] =="<hpid>":
        start = line.find("<hmom>")+7
        end = line.find("<\\hmom>")-2
        hard_build.append({"px":float(line[start:end].split(",")[0]),"py":float(line[start:end].split(",")[1]),
            "pz":float(line[start:end].split(",")[2]),"E":float(line[start:end].split(",")[3])})


array = builder.snapshot()
hard_array = hard_build.snapshot()

#We recluster with Fastjet
jetdef = fastjet.JetDefinition(fastjet.kt_algorithm, R_clust)
cluster = fastjet.ClusterSequence(array, jetdef)

pseu_jets = cluster.inclusive_jets(20)


acceptedList = [False]

for i in range(nEvents-1):
    if i !=0:
        acceptedList.append(True)


good = 0
bad = 0
for i in range(len(acceptedList)):
    if acceptedList[i]: good += 1
    else : bad +=1
print(good)
print(bad)



builder = ak.ArrayBuilder()
import pyhepmc as hp
tot_ev = 0
with hp.open(event_file) as f:
    for event in f:
        tot_ev +=1
        builder.begin_list()
        for p in event.particles:
            if p.children == []:
                builder.append({"px":p.momentum[0],"py":p.momentum[1],"pz":p.momentum[2],"E":p.momentum[3]})
        builder.end_list()

#Reclustering of the events from pythia
array = builder.snapshot()

jetdef = fastjet.JetDefinition(fastjet.kt_algorithm, R_clust)
cluster = fastjet.ClusterSequence(array, jetdef)

pseu_jets2 = cluster.inclusive_jets(20)



##############################Graphs####################

#This implementation of the graphs is really slow as we are doing 3 time the same operation.
from matplotlib import pyplot as plt

temp_lin = np.linspace(0,600,50)
n_pred = np.zeros(50)

fig, axs = plt.subplots(1,3, sharex=True,sharey=True)

for ik in range(len(acceptedList)-1):
    if len(pseu_jets[ik]) > 0:
        hardness = np.zeros(len(pseu_jets[ik]))
        for j in range(len(pseu_jets[ik])):
            hardness[j] = abs(pseu_jets[ik][j]["E"])
        hard_ind = np.argsort(hardness)

        
        if hardness[hard_ind[-1]]/12 < 50:
            n_pred[math.floor(hardness[hard_ind[-1]]/12)] += 1


n_pred_ps = np.zeros(50)

for ik in range(len(pseu_jets2[:])):
    if len(pseu_jets2[ik]) > 0:
        hardness = np.zeros(len(pseu_jets2[ik]))
        for j in range(len(pseu_jets2[ik])):
            hardness[j] = abs(pseu_jets2[ik][j]["E"])
        hard_ind = np.argsort(hardness)

        
        if hardness[hard_ind[-1]]/12 < 50:
            n_pred_ps[math.floor(hardness[hard_ind[-1]]/12)] += 1

temp_lin = np.linspace(0,612,51)
axs[0].stairs(n_pred,temp_lin,color='r',linewidth=2.5)
axs[0].stairs(n_pred_ps,temp_lin,color='g',linewidth=2.5)

axs[0].set_title("1st jet")
axs[0].set_xlabel("E of jets")
axs[0].set_ylabel("# of Events")



temp_lin = np.linspace(0,1,50)
n_pred = np.zeros(50)

for ik in range(len(acceptedList)-1):
    if len(pseu_jets[ik]) > 1:
        hardness = np.zeros(len(pseu_jets[ik]))
        for j in range(len(pseu_jets[ik])):
            hardness[j] = abs(pseu_jets[ik][j]["E"])
        hard_ind = np.argsort(hardness)

        
        if hardness[hard_ind[-2]]/12 < 50:
            n_pred[math.floor(hardness[hard_ind[-2]]/12)] += 1

n_pred_ps = np.zeros(50)

for ik in range(len(pseu_jets2[:])):
    if len(pseu_jets2[ik]) > 1:
        hardness = np.zeros(len(pseu_jets2[ik]))
        for j in range(len(pseu_jets2[ik])):
            hardness[j] = abs(pseu_jets2[ik][j]["E"])
        hard_ind = np.argsort(hardness)

        
        if hardness[hard_ind[-2]]/12 < 50:
            n_pred_ps[math.floor(hardness[hard_ind[-2]]/12)] += 1

temp_lin = np.linspace(0,612,51)
axs[1].stairs(n_pred,temp_lin,color='r',linewidth=2.5)
axs[1].stairs(n_pred_ps,temp_lin,color='g',linewidth=2.5)

axs[1].set_title("2nd jet")
axs[1].set_xlabel("E of jets")


temp_lin = np.linspace(0,1,50)
n_pred = np.zeros(50)

for ik in range(len(acceptedList)-1):
    if len(pseu_jets[ik]) > 2:
        hardness = np.zeros(len(pseu_jets[ik]))
        for j in range(len(pseu_jets[ik])):
            hardness[j] = abs(pseu_jets[ik][j]["E"])
        hard_ind = np.argsort(hardness)

        
        if hardness[hard_ind[-3]]/12 < 50:
            n_pred[math.floor(hardness[hard_ind[-3]]/12)] += 1

n_pred_ps = np.zeros(50)

for ik in range(len(pseu_jets2[:])):
    if len(pseu_jets2[ik]) > 2:
        hardness = np.zeros(len(pseu_jets2[ik]))
        for j in range(len(pseu_jets2[ik])):
            hardness[j] = abs(pseu_jets2[ik][j]["E"])
        hard_ind = np.argsort(hardness)

        
        if hardness[hard_ind[-3]]/12 < 50:
            n_pred_ps[math.floor(hardness[hard_ind[-3]]/12)] += 1

temp_lin = np.linspace(0,612,51)
axs[2].stairs(n_pred,temp_lin,color='r',linewidth=2.5)
axs[2].stairs(n_pred_ps,temp_lin,color='g',linewidth=2.5)

axs[2].set_title("3rd jet")
axs[2].set_xlabel("E of jets")

plt.suptitle("ee>jj shower, MG*Pythia (green) vs MG+my shower (red), fastjet_kt, e+ e-@ 500 MeV")
plt.show()